[주석 달린 전체코드는 맨 아래]

필요한 모듈
HTTP 요청 처리 (http), 파일 시스템 접근 (fs), URL 파싱 (url), 쿼리스트링 파싱 (querystring), 파일 경로 관리 (path)
와 같은 Node.js 모듈들을 불러옵니다.
- -
var http = require("http");   // HTTP 서버 생성
var fs = require("fs");       // 파일 시스템 접근
var url = require("url");     // URL 파싱
var qs = require("querystring"); // 쿼리스트링 파싱
const path = require("path"); // 파일 경로 관리
--

보안
--
http.createServer() = Node Module
server.listen() = 요청에 대해 응답할 수 있도록 하는 API\
ttp는 app에 담겨있음
app.listen(3000) 3000번 포트를 귀 기울여 듣다가 응답

const path = require("path");

외부 모듈을 이용할 때
 var filteredId = path.parse(queryData.id).base;
 path.parse(정화할 데이터).base를 이용해 필터링 해준다.
 ㄴ 필터링 해주지 않으면 http://localhost:3000/?id=../password.js 했을 때 password.js의 정보가 출력 됨
 쿼리데이터 경로 설정 해두었던 것들도 바꾸어 준다.
 ㄴ  var title = queryData.id;
     var sanitizeTitle = sanitizeHtml(title);

CRUD 중 D 주의해야 하는 부분
delete를 링크로 만들면, get방식(쿼리스트링 있는)으로 만들면 링크를 타고 들어가면 삭제됨
반드시 form을 이용한 post 방식으로 보내야 한다
form에 onsubmit 사용하여 "정말로 삭제하시겠습니까?" 등의 창을 띄워도 좋을 듯
- -

HTML 템플릿
templateHTML 함수와 templateList 함수는 데이터에 기반하여 동적으로 HTML 내용을 생성합니다.
- -
function templateHTML(title, list, body, control) {
  return `<!doctype html>
    <html>
    <head>
      <title>WEB1 - ${title}</title>
      <meta charset="utf-8">
    </head>
    <body>
      <h1><a href="/">WEB</a></h1>
      ${list}
      ${control}
      ${body}
    </body>
    </html>`;
}
- -

템플릿 리스트
- -
function templateList(filelist) {
  var list = "<ul>";
  var i = 0;
  while (i < filelist.length) {
    list = list + `<li><a href="/?id=${filelist[i]}">${filelist[i]}</a></li>`;
    i = i + 1;
  }
  list = list + "</ul>";
  return list;
}
- -

서버 설정 및 라우팅
메인 로직은 HTTP 서버를 생성하고 (http.createServer), URL 경로에 따라 다른 작업을 수행합니다.
각 URL 경로에 따라 파일을 읽고 생성, 수정, 삭제 등의 작업을 수행하며, 
해당 작업에 따른 HTML 응답을 생성하여 클라이언트에게 전송합니다.
- -
var app = http.createServer(function (request, response) {
  var _url = request.url;
  var queryData = url.parse(_url, true).query;
  var pathname = url.parse(_url, true).pathname;

  if (pathname === "/") {
    if (queryData.id === undefined) {
      // 메인 페이지 - 토픽 리스트 표시
      fs.readdir("./data", function (error, filelist) {
        var title = "환영합니다";
        var description = "안녕하세요, 학생 여러분";
        var list = templateList(filelist);
        var template = templateHTML(
          title,
          list,
          `<h2>${title}</h2><p>${description}</p>`,
          `<a href="/create">글쓰기</a>`
        );
        response.writeHead(200);
        response.end(template);
      });
    } else {
      // 특정 토픽 조회 페이지
      fs.readdir("./data", function (error, filelist) {
        fs.readFile(`data/${queryData.id}`, "utf-8", function (err, data) {
          var title = queryData.id;
          var description = data;
          var list = templateList(filelist);
          var template = templateHTML(
            title,
            list,
            `<h2>${title}</h2><p>${description}</p>`,
            `<a href="/create">글쓰기</a> 
             <a href="/update?id=${title}">수정</a>
             <form action="delete_process" method="post">
                  <input type="hidden" name="id" value="${title}">
                  <input type="submit" value="삭제">
             </form>`
          );
          response.writeHead(200);
          response.end(template);
        });
      });
    }
  } else if (pathname === "/create") {
    // 새로운 토픽 생성 페이지
    fs.readdir("./data", function (error, filelist) {
      var title = "WEB - 생성";
      var description = "생성하기";
      var list = templateList(filelist);
      var template = templateHTML(
        title,
        list,
        `<form action="/create_process" method="post">
          <p><input type="text" name="title" placeholder="제목"></p>
          <p><textarea name="description" placeholder="본문"></textarea></p>
          <p><input type="submit"></p>
        </form>`,
        ""
      );
      response.writeHead(200);
      response.end(template);
    });
  } else if (pathname === "/create_process") {
    // 새로운 토픽 생성 처리
    var body = "";
    request.on("data", function (data) {
      body = body + data;
    });
    request.on("end", function () {
      var post = qs.parse(body);
      var title = post.title;
      var description = post.description;
      fs.writeFile(`data/${title}`, description, "utf-8", function (err) {
        response.writeHead(302, { Location: `/?id=${title}` });
        response.end();
      });
    });
  } else if (pathname === "/update") {
    // 기존 토픽 수정 페이지
    fs.readdir("./data", function (error, filelist) {
      fs.readFile(`data/${queryData.id}`, "utf8", function (err, description) {
        var title = queryData.id;
        var list = templateList(filelist);
        var template = templateHTML(
          title,
          list,
          `<form action="/update_process" method="post">
            <input type="hidden" name="id" value="${title}">
            <p><input type="text" name="title" placeholder="제목" value="${title}"></p>
            <p><textarea name="description" placeholder="본문">${description}</textarea></p>
            <p><input type="submit"></p>
          </form>`,
          `<a href="/create">글쓰기</a> <a href="/update?id=${title}">수정</a>`
        );
        response.writeHead(200);
        response.end(template);
      });
    });
  } else if (pathname === "/update_process") {
    // 기존 토픽 수정 처리
    var body = "";
    request.on("data", function (data) {
      body = body + data;
    });
    request.on("end", function () {
      var post = qs.parse(body);
      var id = post.id;
      var title = post.title;
      var description = post.description;
      fs.rename(`data/${id}`, `data/${title}`, function (error) {});
      fs.writeFile(`data/${title}`, description, "utf-8", function (err) {
        response.writeHead(302, { Location: `/?id=${title}` });
        response.end();
      });
    });
  } else if (pathname === "/delete_process") {
    // 토픽 삭제 처리
    var body = "";
    request.on("data", function (data) {
      body = body + data;
    });
    request.on("end", function () {
      var post = qs.parse(body);
      var id = post.id;
      fs.unlink(`data/${id}`, function (error) {
        response.writeHead(302, { Location: `/` });
        response.end();
      });
    });
  } else {
    // 404 처리
    response.writeHead(404);
    response.end("Not Found");
  }
});
app.listen(3000);
- -


main 전체코드(주석 있는 버전)
- -
var http = require("http");
var fs = require("fs");
var url = require("url");
var qs = require("querystring");
var template = require("./lib/template.js");
const path = require("path");
var sanitizeHtml = require("sanitize-html"); // sanitize는 외부에서 입력한 js를 살균

// http.createServer() = Node Module
// server.listen() = 요청에 대해 응답할 수 있도록 하는 API\
// http는 app에 담겨있음
// app.listen(3000) 3000번 포트를 귀 기울여 듣다가 응답
var app = http.createServer(function (request, response) {
  var _url = request.url; // 그냥 url은 모듈 url 의미
  var queryData = url.parse(_url, true).query; // true는 쿼리를 객체로 변환할지 여부
  var pathname = url.parse(_url, true).pathname;
  if (pathname === "/") {
    if (queryData.id === undefined) {
      fs.readdir("./data", function (error, filelist) {
        var title = "Wellcome";
        var description = "Hello, Students";

        var list = template.list(filelist);
        var html = template.HTML(
          title,
          list,
          `<h2>${title}</h2><p>${description}</p>`,
          `<a href="/create">create</a>`
        );
        response.writeHead(200); // 200 = 성공
        response.end(html);
      });
    } else {
      fs.readdir("./data", function (error, filelist) {
        var filteredId = path.parse(queryData.id).base;
        // 외부에서 불러온 모듈(readFile)을 웹페이지에서 ../ 경로를 입력하여 찾을 수 없도록 해줌
        // 필터링 해주지 않으면 http://localhost:3000/?id=../password.js 했을 때 password.js의 정보가 출력 됨
        fs.readFile(`data/${filteredId}`, "utf-8", function (err, data) {
          // 경로 설정도 필터링 된 것으로 변경
          var title = queryData.id;
          var sanitizeTitle = sanitizeHtml(title);
          var description = data; // description = 본문
          var sanitizeDescription = sanitizeHtml(description, {
            allowedTags: ["h1"], // h1태그는 허용
          });
          var list = template.list(filelist);
          var html = template.HTML(
            sanitizeTitle,
            list,
            `<h2>${sanitizeTitle}</h2><p>${sanitizeDescription}</p>`,
            `<a href="/create">create</a> 
             <a href="/update?id=${sanitizeTitle}">update</a>
             
             <form action="delete_process" method="post">
                  <input type="hidden" name="id" value="${sanitizeTitle}">
                  <input type="submit" value="delete">
             </form>`
            // delete를 링크로 만들면, get방식(쿼리스트링 있는)으로 만들면 링크를 타고 들어가면 삭제됨
            // 반드시!! post 방식으로 보내야 한다
          );
          response.writeHead(200); // 200(서버가 브라우저에게 주면) = 성공
          response.end(html);
        });
      });
    }
  } else if (pathname === "/create") {
    fs.readdir("./data", function (error, filelist) {
      var title = "WEB - create";
      var description = "Create";
      var list = template.list(filelist);
      var html = template.HTML(
        title,
        list,
        ` 
        <form action="http://localhost:3000/create_process" method="post">
        <p><input type="text" name="title" placeholder="title"></p>
        <p><textarea name="description" placeholder="description"></textarea></p>
        <p><input type="submit"></p>
        </form>
        `,
        " "
      );
      response.writeHead(200); // 200 = 성공
      response.end(html);
    });
  } else if (pathname === "/create_process") {
    var body = "";
    // request가 데이터를 받을 대마다 호출되는 콜백 함수
    request.on("data", function (data) {
      body = body + data;
    });
    // request가 모든 데이터를 받은 후 호출되는 콜백 함수
    request.on("end", function () {
      // request를 끝내기 위한 콜백
      var post = qs.parse(body); // parse를 통하여 정보를 객체화
      var title = post.title;
      var description = post.description;
      // writeFile을 사용하여 파일 생성 및 쓰기
      fs.writeFile(`data/${title}`, description, "utf-8", function (err) {
        response.writeHead(302, { Location: `/?id=${title}` }); // 302 = 리다이렉션
        response.end(); // 리다이렉션(적절한 다른 페이지로 이동)
      });
      // console.log(post);
    });
  } else if (pathname === "/update") {
    fs.readdir("./data", function (error, filelist) {
      var filteredId = path.parse(queryData.id).base;
      fs.readFile(`data/${filteredId}`, "utf8", function (err, description) {
        var title = queryData.id;
        var list = template.list(filelist);
        var html = template.HTML(
          title,
          list,
          `
          <form action="/update_process" method="post">
            <input type="hidden" name="id" value="${title}">
            <p><input type="text" name="title" placeholder="title" value="${title}"></p> 
            <p>
              <textarea name="description" placeholder="description">${description}</textarea>
            </p>
            <p>
              <input type="submit">
            </p>
          </form>
          `,
          `<a href="/create">create</a> <a href="/update?id=${title}">update</a>`
        );
        response.writeHead(200);
        response.end(html);
      });
    });
  } else if (pathname === "/update_process") {
    var body = "";
    request.on("data", function (data) {
      body = body + data;
    });
    request.on("end", function () {
      var post = qs.parse(body); // parse를 통하여 정보를 객체화
      var id = post.id;
      var title = post.title;
      var description = post.description;
      fs.rename(`data/${id}`, `data/${title}`, function (error) {});
      console.log(post);
      fs.writeFile(`data/${title}`, description, "utf-8", function (err) {
        response.writeHead(302, { Location: `/?id=${title}` }); // 302 = 리다이렉션
        response.end();
      });
    });
  } else if (pathname === "/delete_process") {
    var body = "";
    request.on("data", function (data) {
      body = body + data;
    });
    request.on("end", function () {
      var post = qs.parse(body); // parse를 통하여 정보를 객체화
      var id = post.id;
      var filteredId = path.parse(id).base; // 이부분도 보안상 변경
      fs.unlink(`data/${filteredId}`, function (error) {
        response.writeHead(302, { Location: `/` }); // 302 = 리다이렉션
        response.end();
      });
    });
  } else {
    response.writeHead(404);
    response.end("Not Found");
  }
});
app.listen(3000);
