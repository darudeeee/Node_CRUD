필요한 모듈
HTTP 요청 처리 (http), 파일 시스템 접근 (fs), URL 파싱 (url), 쿼리스트링 파싱 (querystring), 파일 경로 관리 (path)
와 같은 Node.js 모듈들을 불러옵니다.
- -
var http = require("http");   // HTTP 서버 생성
var fs = require("fs");       // 파일 시스템 접근
var url = require("url");     // URL 파싱
var qs = require("querystring"); // 쿼리스트링 파싱
const path = require("path"); // 파일 경로 관리
- -

HTML 템플릿
templateHTML 함수와 templateList 함수는 데이터에 기반하여 동적으로 HTML 내용을 생성합니다.
- -
function templateHTML(title, list, body, control) {
  return `<!doctype html>
    <html>
    <head>
      <title>WEB1 - ${title}</title>
      <meta charset="utf-8">
    </head>
    <body>
      <h1><a href="/">WEB</a></h1>
      ${list}
      ${control}
      ${body}
    </body>
    </html>`;
}
- -

템플릿 리스트
- -
function templateList(filelist) {
  var list = "<ul>";
  var i = 0;
  while (i < filelist.length) {
    list = list + `<li><a href="/?id=${filelist[i]}">${filelist[i]}</a></li>`;
    i = i + 1;
  }
  list = list + "</ul>";
  return list;
}
- -

서버 설정 및 라우팅
메인 로직은 HTTP 서버를 생성하고 (http.createServer), URL 경로에 따라 다른 작업을 수행합니다.
각 URL 경로에 따라 파일을 읽고 생성, 수정, 삭제 등의 작업을 수행하며, 
해당 작업에 따른 HTML 응답을 생성하여 클라이언트에게 전송합니다.
- -
var app = http.createServer(function (request, response) {
  var _url = request.url;
  var queryData = url.parse(_url, true).query;
  var pathname = url.parse(_url, true).pathname;

  if (pathname === "/") {
    if (queryData.id === undefined) {
      // 메인 페이지 - 토픽 리스트 표시
      fs.readdir("./data", function (error, filelist) {
        var title = "환영합니다";
        var description = "안녕하세요, 학생 여러분";
        var list = templateList(filelist);
        var template = templateHTML(
          title,
          list,
          `<h2>${title}</h2><p>${description}</p>`,
          `<a href="/create">글쓰기</a>`
        );
        response.writeHead(200);
        response.end(template);
      });
    } else {
      // 특정 토픽 조회 페이지
      fs.readdir("./data", function (error, filelist) {
        fs.readFile(`data/${queryData.id}`, "utf-8", function (err, data) {
          var title = queryData.id;
          var description = data;
          var list = templateList(filelist);
          var template = templateHTML(
            title,
            list,
            `<h2>${title}</h2><p>${description}</p>`,
            `<a href="/create">글쓰기</a> 
             <a href="/update?id=${title}">수정</a>
             <form action="delete_process" method="post">
                  <input type="hidden" name="id" value="${title}">
                  <input type="submit" value="삭제">
             </form>`
          );
          response.writeHead(200);
          response.end(template);
        });
      });
    }
  } else if (pathname === "/create") {
    // 새로운 토픽 생성 페이지
    fs.readdir("./data", function (error, filelist) {
      var title = "WEB - 생성";
      var description = "생성하기";
      var list = templateList(filelist);
      var template = templateHTML(
        title,
        list,
        `<form action="/create_process" method="post">
          <p><input type="text" name="title" placeholder="제목"></p>
          <p><textarea name="description" placeholder="본문"></textarea></p>
          <p><input type="submit"></p>
        </form>`,
        ""
      );
      response.writeHead(200);
      response.end(template);
    });
  } else if (pathname === "/create_process") {
    // 새로운 토픽 생성 처리
    var body = "";
    request.on("data", function (data) {
      body = body + data;
    });
    request.on("end", function () {
      var post = qs.parse(body);
      var title = post.title;
      var description = post.description;
      fs.writeFile(`data/${title}`, description, "utf-8", function (err) {
        response.writeHead(302, { Location: `/?id=${title}` });
        response.end();
      });
    });
  } else if (pathname === "/update") {
    // 기존 토픽 수정 페이지
    fs.readdir("./data", function (error, filelist) {
      fs.readFile(`data/${queryData.id}`, "utf8", function (err, description) {
        var title = queryData.id;
        var list = templateList(filelist);
        var template = templateHTML(
          title,
          list,
          `<form action="/update_process" method="post">
            <input type="hidden" name="id" value="${title}">
            <p><input type="text" name="title" placeholder="제목" value="${title}"></p>
            <p><textarea name="description" placeholder="본문">${description}</textarea></p>
            <p><input type="submit"></p>
          </form>`,
          `<a href="/create">글쓰기</a> <a href="/update?id=${title}">수정</a>`
        );
        response.writeHead(200);
        response.end(template);
      });
    });
  } else if (pathname === "/update_process") {
    // 기존 토픽 수정 처리
    var body = "";
    request.on("data", function (data) {
      body = body + data;
    });
    request.on("end", function () {
      var post = qs.parse(body);
      var id = post.id;
      var title = post.title;
      var description = post.description;
      fs.rename(`data/${id}`, `data/${title}`, function (error) {});
      fs.writeFile(`data/${title}`, description, "utf-8", function (err) {
        response.writeHead(302, { Location: `/?id=${title}` });
        response.end();
      });
    });
  } else if (pathname === "/delete_process") {
    // 토픽 삭제 처리
    var body = "";
    request.on("data", function (data) {
      body = body + data;
    });
    request.on("end", function () {
      var post = qs.parse(body);
      var id = post.id;
      fs.unlink(`data/${id}`, function (error) {
        response.writeHead(302, { Location: `/` });
        response.end();
      });
    });
  } else {
    // 404 처리
    response.writeHead(404);
    response.end("Not Found");
  }
});
app.listen(3000);
- -
여기까지가 기본